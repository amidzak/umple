/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.24.0-dab6b48 modeling language!*/

package distributed.rmi5;
import java.util.*;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.io.Serializable;
import distributed.rmi5.UmpleObjectFactory;
public class Microwave implements java.io.Serializable
{
  IMicrowaveImpl realObject;
  public void setRealObject(IMicrowaveImpl aObject)
  {
    realObject=aObject;
  }
  public IMicrowaveImpl getRealObject()
  {
    return realObject;
  }
  public Microwave(int aX, String aF, String component)
  {
    realObject = UmpleObjectFactory.getInstance().addMicrowave(aX,aF, component, this);
  }
  public Microwave(int aX, String aF, int component)
  {
    realObject = UmpleObjectFactory.getInstance().addMicrowave(aX,aF, component, this);
  }
  public Microwave(int aX, String aF)
  {
    realObject = UmpleObjectFactory.getInstance().createMicrowave(aX,aF, this);
  }
  public void setRealSelf(Microwave self)
  {
    while(true)
      try{
        realObject.setRealSelf(self);
        break;
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public int getHashCode()
  {
    while(true)
      try{
        return realObject.getHashCode();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean setX(int aX)
  {
    while(true)
      try{
        return realObject.setX(aX);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean setF(String aF)
  {
    while(true)
      try{
        return realObject.setF(aF);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public int getX()
  {
    while(true)
      try{
        return realObject.getX();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public String getF()
  {
    while(true)
      try{
        return realObject.getF();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public Client getClient(int index)
  {
    while(true)
      try{
        return realObject.getClient(index);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public List<Client> getClients()
  {
    while(true)
      try{
        return realObject.getClients();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public int numberOfClients()
  {
    while(true)
      try{
        return realObject.numberOfClients();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean hasClients()
  {
    while(true)
      try{
        return realObject.hasClients();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public int indexOfClient(Client aClient)
  {
    while(true)
      try{
        return realObject.indexOfClient(aClient);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public static int minimumNumberOfClients()
  {
    while(true)
      try{
        return MicrowaveImpl.minimumNumberOfClients();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean addClient(Client aClient)
  {
    while(true)
      try{
        return realObject.addClient(aClient);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean removeClient(Client aClient)
  {
    while(true)
      try{
        return realObject.removeClient(aClient);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean addClientAt(Client aClient, int index)
  {
    while(true)
      try{
        return realObject.addClientAt(aClient,index);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public boolean addOrMoveClientAt(Client aClient, int index)
  {
    while(true)
      try{
        return realObject.addOrMoveClientAt(aClient,index);
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public void delete()
  {
    while(true)
      try{
        realObject.delete();
        break;
        }
    catch(Exception e) {System.err.println(e.toString());}
  }
  public String toString()
  {
    while(true)
      try{
        return realObject.toString();
        }
    catch(Exception e) {System.err.println(e.toString());}
  }

  public boolean equals(Object obj)
  {
    if(obj==null)
      return false;
    if(obj.getClass()!=this.getClass())
      return false;
    return (getHashCode()==((Microwave)obj).getHashCode());
  }
}