/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.24.0-dab6b48 modeling language!*/

package distributed.rmi5;
import java.applet.*;
import java.util.*;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class ClientImpl implements IClientImpl
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //ClientImpl Attributes
  private String id;

  //ClientImpl Associations
  private List<Microwave> microwaves;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public ClientImpl(Client proxy)
  {
    realSelf=proxy;
    realSelf.setRealObject(this);
    while(true)
    {
      try
      {  
        UnicastRemoteObject.exportObject(this,0);
        break;
      } 
      catch (Exception e)
      {
        System.err.println("Server Exception: " + e.toString());
      }
    } 
    id = "s";
    microwaves = new ArrayList<Microwave>();
  }
  //------------------------
  // Reference to the proxy
  //------------------------
  Client realSelf;
  
  public void setRealSelf(Client self)
  {
    realSelf=self;
  }

  //------------------------
  // Returning the Hashcode
  //------------------------
  public int getHashCode()
  {
    return hashCode();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setId(String aId)
  {
    boolean wasSet = false;
    id = aId;
    wasSet = true;
    return wasSet;
  }

  /**
   * isA ClientI;
   */
  public String getId()
  {
    return id;
  }

  public Microwave getMicrowave(int index)
  {
    Microwave aMicrowave = microwaves.get(index);
    return aMicrowave;
  }

  public List<Microwave> getMicrowaves()
  {
    List<Microwave> newMicrowaves = Collections.unmodifiableList(microwaves);
    return newMicrowaves;
  }

  public int numberOfMicrowaves()
  {
    int number = microwaves.size();
    return number;
  }

  public boolean hasMicrowaves()
  {
    boolean has = microwaves.size() > 0;
    return has;
  }

  public int indexOfMicrowave(Microwave aMicrowave)
  {
    int index = microwaves.indexOf(aMicrowave);
    return index;
  }

  public static int minimumNumberOfMicrowaves()
  {
    return 0;
  }

  public boolean addMicrowave(Microwave aMicrowave)
  {
    boolean wasAdded = false;
    if (microwaves.contains(aMicrowave)) { return false; }
    microwaves.add(aMicrowave);
    if (aMicrowave.indexOfClient(realSelf) != -1)
    {
      wasAdded = true;
    }
    else
    {
      wasAdded = aMicrowave.addClient(realSelf);
      if (!wasAdded)
      {
        microwaves.remove(aMicrowave);
      }
    }
    return wasAdded;
  }

  public boolean removeMicrowave(Microwave aMicrowave)
  {
    boolean wasRemoved = false;
    if (!microwaves.contains(aMicrowave))
    {
      return wasRemoved;
    }

    int oldIndex = microwaves.indexOf(aMicrowave);
    microwaves.remove(oldIndex);
    if (aMicrowave.indexOfClient(realSelf) == -1)
    {
      wasRemoved = true;
    }
    else
    {
      wasRemoved = aMicrowave.removeClient(realSelf);
      if (!wasRemoved)
      {
        microwaves.add(oldIndex,aMicrowave);
      }
    }
    return wasRemoved;
  }

  public boolean addMicrowaveAt(Microwave aMicrowave, int index)
  {  
    boolean wasAdded = false;
    if(addMicrowave(aMicrowave))
    {
      if(index < 0 ) { index = 0; }
      if(index > numberOfMicrowaves()) { index = numberOfMicrowaves() - 1; }
      microwaves.remove(aMicrowave);
      microwaves.add(index, aMicrowave);
      wasAdded = true;
    }
    return wasAdded;
  }

  public boolean addOrMoveMicrowaveAt(Microwave aMicrowave, int index)
  {
    boolean wasAdded = false;
    if(microwaves.contains(aMicrowave))
    {
      if(index < 0 ) { index = 0; }
      if(index > numberOfMicrowaves()) { index = numberOfMicrowaves() - 1; }
      microwaves.remove(aMicrowave);
      microwaves.add(index, aMicrowave);
      wasAdded = true;
    } 
    else 
    {
      wasAdded = addMicrowaveAt(aMicrowave, index);
    }
    return wasAdded;
  }

  public void delete()
  {
    ArrayList<Microwave> copyOfMicrowaves = new ArrayList<Microwave>(microwaves);
    microwaves.clear();
    for(Microwave aMicrowave : copyOfMicrowaves)
    {
      aMicrowave.removeClient(realSelf);
    }
  }


  /**
   * key{id}
   * isA CC;
   */
   public static  void method2(){
    
  }

   static  int method3(){
    return 12;
  }


  public String toString()
  {
    return super.toString() + "["+
            "id" + ":" + getId()+ "]";
  }
}