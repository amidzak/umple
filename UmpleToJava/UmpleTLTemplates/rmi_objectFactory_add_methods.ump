
class UmpleToJava {
  rmi_objectFactory_add_methods <<!<</*rmi_objectFactory_add_methods*/>><<#
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2})",new Object[] {accessibility, "add"+uClass.getName(), arguments});

  #>>
  {
    while(true){
      try
      {
        return remoteFactories.get(getThisNodeId()).new<<=uClass.getName()>>(<<=caller>>);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }  
  <<#
  }
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2}UmpleRuntime.UmpleComponent component)",new Object[] {accessibility, "add"+uClass.getName(), arguments+argumentscomma});
  #>>
  {
    while(true){
      try
      {
        return remoteFactories.get(getNodeId(component)).new<<=uClass.getName()>>(<<=caller>>);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }
    <<#
    }
  append(realSb,"\n  {0} {1}({2})",new Object[] {accessibility, "new"+uClass.getName(), arguments});
  if(isInterface==true){
  #>>throws RemoteException;<<#
  }
  else{
#>>
  {
  <<=uClass.getName()>>Remote remoteObject = new <<=uClass.getName()>>Remote();
  <<=uClass.getName()>> object= new <<=uClass.getName()>>(<<=caller>>);
    remoteObject.setRealObject(object);
    while(true)
    {
      try
      {  
        UnicastRemoteObject.exportObject(object,0);
        break;
      } 
      catch (Exception e)
      {
        System.err.println("Server Exception: " + e.toString());
      }
    }
  object.setRealObject(remoteObject);
  listOf<<=uClass.getName()>>.add(remoteObject);
  return object; 
  }
  <<#
    }#>>!>>
}
