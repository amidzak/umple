
class UmpleToJava {
  rmi_objectFactory_add_methods <<!<</*rmi_objectFactory_add_methods*/>><<#
  if(isInterface!=true){
    append(realSb,"\n  {0} static {1}({2}int component)",new Object[] {accessibility,uClass.getName()+" new"+uClass.getName(), arguments+argumentscomma});

  #>>
  {
    if(getComponentId(component)==getThisComponentId())
      return new<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")>>);
    while(true){
      try
      {
        return remoteFactories.get(getComponentId(component)).create<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")>>);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }  
  <<#
  }
  if(isInterface!=true){
    append(realSb,"\n  {0} static {1}({2}int component)",new Object[] {accessibility,uClass.getName()+" new"+uClass.getName(), arguments});

  #>>
  { 
    while(true){
      try
      {
        return remoteFactories.get(getComponentId(component)).create<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")>>);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }  
  <<#
  }  
  if(isInterface!=true){
    append(realSb,"\n  {0} static {1}({2}String component)",new Object[] {accessibility, uClass.getName()+" new"+uClass.getName(), arguments+argumentscomma});
  #>>
  {
   return new<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")+argumentscomma>>getComponentId(component));
  }
    <<#
    }
  append(realSb,"\n  {0} {1}({2})",new Object[] {accessibility, uClass.getName()+" create"+uClass.getName(), arguments});
  if(isInterface==true){
  #>>throws RemoteException;<<#
  }
  else{
#>>
  {
  <<=uClass.getName()>>Impl object = new <<=uClass.getName()>>Impl(<<=gClass.getLookup("constructorSignature_caller")>>);
  listOf<<=uClass.getName()>>.add(object);
  return object.getRealSelf(); 
  }
  <<#
    }#>>!>>
}
