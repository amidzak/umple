
class UmpleToJava {
  rmi_objectFactory_add_methods1 <<!<</*rmi_objectFactory_add_methods1*/>><<#
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2}{3} proxy)",new Object[] {accessibility, "add"+uClass.getName(), arguments+argumentscomma,uClass.getName()});

  #>>
  {
    while(true){
      try
      {
        return remoteFactories.get(getThisNodeId()).new<<=uClass.getName()>>(<<=caller>><<=argumentscomma>>proxy);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }  
  <<#
  }
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2}UmpleRuntime.UmpleComponent component{3} proxy)",new Object[] {accessibility, "add"+uClass.getName(), arguments+argumentscomma, ", "+uClass.getName()});
  #>>
  {
    while(true){
      try
      {
        return remoteFactories.get(getNodeId(component)).new<<=uClass.getName()>>(<<=caller>><<=argumentscomma>>proxy);
      }
      catch(Exception e) 
      {
        e.printStackTrace();
      }  
    }
  }
    <<#
    }
  append(realSb,"\n  {0}{1} {2}({3}{4} proxy)",new Object[] {webMethod,accessibility, "new"+uClass.getName(), arguments,argumentscomma+uClass.getName()});
  if(isInterface==true){
  #>>throws RemoteException;<<#
  }
  else{
#>>
  {
  <<=uClass.getName()>>Impl object = new <<=uClass.getName()>>Impl(<<=caller>>);
    object.setSelf(proxy);
    proxy.setRealObject(object);
    while(true)
    {
      try
      { 
        <<#if(uClass.getDistributeTechnology().equals("RMI")){#>> 
        UnicastRemoteObject.exportObject(object,0);
        <<#}
        else if(uClass.getDistributeTechnology().equals("WS")){
        #>>
        Endpoint.publish(nodes.get(getThisNodeId()).getUrl()+":"+String.valueOf(nodes.get(getThisNodeId()).getPort())+"/hw",object);
        <<#}#>>
        break;
      } 
      catch (Exception e)
      {
        System.err.println("Server Exception: " + e.toString());
      }
    } 

  listOf<<=uClass.getName()>>.add(object);
  return remoteObject; 
  }
  <<#
    }#>>!>>
}
