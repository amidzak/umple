use constructor_AssociationAssignDefault.ump;
use constructor_AssociationAssignOptionalMany.ump;
use constructor_AssociationCreateOneToOne.ump;
use constructor_AttributeAssign.ump;
use constructor_AttributeAssignAutounique.ump;
use constructor_AttributeAssignDefaulted.ump;
use constructor_AttributeAssignLazy.ump;
use constructor_AttributeAssignList.ump;
use specializationCode_Constructor.ump;


class UmpleToJava {
    constructor_DeclareOneToOne <<!<</*constructor_DeclareOneToOne*/>><<#
  
  String signature = gClass.getLookup("constructorSignature_mandatory");
  hasBody = false;
#>>

  public <<=uClass.getName()>>(<<=gen.translate("constructorMandatory",uClass)>><<#
  if(uClass.getIsDistributed())
  {  
    if(!gen.translate("constructorMandatory",uClass).equals(""))
    {
      append(realSb, ", "+uClass.getName().substring(0,uClass.getName().length()-4)+" proxy");
    }
    else
    {
      append(realSb,uClass.getName().substring(0,uClass.getName().length()-4)+" proxy");
    }
  }  
  #>>)
  {
<<#
  if(uClass.getIsDistributed())
  {
    #>>
    realSelf=proxy;
    realSelf.setRealObject(this);
    while(true)
    {
      try
      {  
        UnicastRemoteObject.exportObject(this,0);
        break;
      } 
      catch (Exception e)
      {
        System.err.println("Server Exception: " + e.toString());
      }
    } 
    <<#
  }
  if (!uClass.isRoot())
  {
    appendln(realSb, "");
    append(realSb, "    super({0});", gClass.getParentClass().getLookup("constructorSignature_caller"));
    hasBody = true;
  }
  
  if (customConstructorPrefixCode != null) 
  {
    addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customConstructorPrefixCode,uClass.getName());
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPrefixCode, "    "));
    hasBody = true;
  }
  
  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique() || av.isConstant() || "theInstance".equals(gen.translate("attributeOne",av)))
    {
      continue;
    }
  
    if (av.getIsList())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignList >><<#
    }
    else if (av.getModifier().equals("defaulted"))
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignDefaulted >><<# 
    }
    else if (av.getIsLazy())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignLazy >><<#
    }
    else
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssign >><<#
    }
  }

  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AttributeAssignAutounique >><<#
    }
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {
    #>><<@ UmpleToJava.specializationCode_Constructor >><<#
    
    if (av.isOnlyOne() && relatedAssociation.isOnlyOne())
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationCreateOneToOne >><<#
    }
    else if ((av.isMN() || av.isN()) && (relatedAssociation.isMandatory() || relatedAssociation.isOptionalN()))
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationAssignOptionalMany >><<#
    }
    else
    {
      hasBody = true;
      #>><<@ UmpleToJava.constructor_AssociationAssignDefault >><<#
    }
  }
  
  if (customConstructorPostfixCode != null) 
  {
    addUncaughtExceptionVariables(realSb.toString().split("\\n").length,customConstructorPostfixCode,uClass.getName());
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPostfixCode, "    "));
    hasBody = true;
  }
  
  if (hasBody)
  {
    appendln(realSb, "");
    append(realSb, "  }");
  }
  else
  {
    append(realSb, "}");
  }
#>>!>>
}
