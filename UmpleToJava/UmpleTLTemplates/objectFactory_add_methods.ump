use objectFactory_add_methods1.ump;
class UmpleToJava {
  objectFactory_add_methods <<!<</*objectFactory_add_methods*/>><<#
  if (model.getDistributePattern()==1){
    #>><<@ UmpleToJava.objectFactory_add_methods1 >><<#
  }
  else{
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2}{3} object)",new Object[] {accessibility, "new"+uClass.getName(), arguments+argumentscomma,uClass.getName()});

  #>>
  {
      return new<<=uClass.getName()>>(<<=caller+argumentscomma>>UmpleRuntime.getComponent("<<=uClass.getName()>>"),object);
  
  }  
  <<#
  }
  if(isInterface!=true){
    append(realSb,"\n  {0} {1}({2}UmpleRuntime.UmpleComponent component,{3} object)",new Object[] {accessibility, "new"+uClass.getName(), arguments+argumentscomma,uClass.getName()});
  #>>
  {
    if(getNodeId(component)!=getThisNodeId())
    {
      while(true){
        try
        {
          <<#if(uClass.getDistributeTechnology().equals("RMI")){#>>return remoteFactories.get(getNodeId(component)).create<<=uClass.getName()>>(<<=caller>>);<<#} 
          else
          {
          #>>
          <<=uClass.getName()>> proxyObject = remoteFactories.get(getNodeId(component)).create<<=uClass.getName()>>(<<=caller>>);
          object.remoteUrl=proxyObject.remoteUrl;
          object.remotePort=proxyObject.remotePort;
          object.remoteHashCode=proxyObject.remoteHashCode;
          return proxyObject.realObject;
          <<#}
          #>>
        }
        catch(Exception e) 
        {
          e.printStackTrace();
        }  
      }
    }
    else
    {
    <<#if(uClass.getDistributeTechnology().equals("RMI")){#>> 
        <<=uClass.getName()>>Remote remoteObject = new <<=uClass.getName()>>Remote();
        listOf<<=uClass.getName()>>.add(remoteObject);
        <<#}
        else if(uClass.getDistributeTechnology().equals("WS")){
        #>>
    <<=uClass.getName()>>Remote remoteObject = <<=uClass.getName()>>Remote.getInstance();
    listOf<<=uClass.getName()>>.add(object);
    <<#}#>>
    while(true)
    {
      try
      {  
        <<#if(uClass.getDistributeTechnology().equals("RMI")){#>> 
        UnicastRemoteObject.exportObject(remoteObject,0);
        <<#}
        else if(uClass.getDistributeTechnology().equals("WS")){
        #>>
        object.remoteUrl=nodes.get(getThisNodeId()).getUrl();
        object.remotePort=String.valueOf(nodes.get(getThisNodeId()).getPort());
        object.remoteId=listOf<<=uClass.getName()>>.indexOf(object);
        Endpoint.publish(object.remoteUrl+":"+object.remotePort+"/<<=uClass.getName()>>Remote",remoteObject);
        <<#}#>>
        break;
      } 
      catch (Exception e)
      {
        System.err.println("Server Exception: " + e.toString());
      }
    }  
    remoteObject.setRealObject(object);
    return remoteObject;
    }
  }
    <<#
    }
  if(isInterface==true){
  append(realSb,"\n  {0}{1} {2}({3})",new Object[] {webMethod,accessibilityCreate, "create"+uClass.getName(), arguments});
  #>>throws RemoteException;<<#
  }
  else{
    append(realSb,"\n  {0}synchronized {1} {2}({3})",new Object[] {webMethod,accessibilityCreate, "create"+uClass.getName(), arguments});
    if(uClass.getIsSingleton()){
    #>>
    {
    <<=uClass.getName()>> object= <<=uClass.getName()>>.getInstance(UmpleRuntime.getComponent("local"));
    <<#
    }
   else
   { 
  #>>
  {
  <<=uClass.getName()>> object= new <<=uClass.getName()>>(<<=caller>><<=argumentscomma>> UmpleRuntime.getComponent("local"));
  <<#}
  if(uClass.getDistributeTechnology().equals("WS"))
  {
  #>>
  return object;
  }
  <<#
  }
  else
  {
  #>>
  return object.realObject;
  }
  <<#
  }
  }
  }  
    #>>!>>
}