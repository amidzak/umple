use UmpleNotice.ump;
use uncaught_exception.ump;
use objectFactory_add_Declare_All.ump;
use objectFactory_listOfObjects_All.ump;
use objectFactory_listOfObjects_instantiation_All.ump;
namespace cruise.umple.compiler.java;

external interface ILang{}

class JavaObjectFactoryClassGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;
    depend cruise.umple.parser.Position;

    isA ILang;

    // Add a newline to the end of the input
    private void appendln(StringBuilder buffer, String input, Object... variables)
    {
        append(buffer, input + "\n", variables);
    }

    // This method will be used to append formatted strings
    // i.e. format("Hello {0} {1}", "andrew","forward");
    private void append(StringBuilder buffer, String input, Object... variables)
    {
        buffer.append(StringFormatter.format(input,variables));
    }

    emit getCode(UmpleModel model, UmpleElement uElement)(JavaObjectFactoryClassGenerator);


    JavaObjectFactoryClassGenerator <<!<</*JavaObjectFactoryClassGenerator*/>><<@ UmpleToJava.UmpleNotice >>
<<#
  JavaGenerator gen = new JavaGenerator();
  gen.setModel(model);
  GeneratorHelper.generator = gen;
  Boolean isInterface=false;
  Set<String> packageSet = new HashSet<String>();
  if(model.getDistributeTechnology().equals("RMI")){
    packageSet.add("java.io.File");
    packageSet.add("java.rmi.registry.Registry");
    packageSet.add("java.rmi.registry.LocateRegistry");
    packageSet.add("java.rmi.RemoteException");
    packageSet.add("java.rmi.server.UnicastRemoteObject");
  }
  if(model.getDistributeTechnology().equals("WS"))
  {
    packageSet.add("javax.jws.WebMethod");
    packageSet.add("javax.jws.WebService");
    packageSet.add("javax.jws.soap.SOAPBinding");
    packageSet.add("javax.jws.soap.SOAPBinding.Style");
    packageSet.add("javax.xml.ws.Endpoint");
    packageSet.add("java.net.URL");
    packageSet.add("javax.xml.namespace.QName");
    packageSet.add("javax.xml.ws.Service");
  }  
  packageSet.add("java.io.FileInputStream");
  packageSet.add("java.io.IOException");
  packageSet.add("java.io.InputStream");
  packageSet.add("java.util.Properties");
  packageSet.add("java.util.*");

  for(UmpleClass uClass: model.getUmpleClasses())
  { GeneratedClass gClass = uClass.getGeneratedClass();
    for (Depend depend : uClass.getDepends())
      {
        packageSet.add(depend.getName());
      }
      
      for (String anImport : gClass.getMultiLookup("import"))
      {
        packageSet.add(anImport);
      }    
    if (uClass.getIsDistributed())
    {
      String packageName="";
      if(!uClass.getPackageName().equals("")){
        packageName=uClass.getPackageName()+".";
        packageName+=uClass.getName();
        packageSet.add(packageName);
      }
    }
  }
String defaultNamespace="";
String qname="";
  if (model.getDefaultNamespace()!=null){#>>
package <<=model.getDefaultNamespace()>>;
  <<#
    defaultNamespace=model.getDefaultNamespace()+".";
    qname=defaultNamespace+"/";
  }
  for(String packageName: packageSet)
  {
#>>
import <<=packageName>>;
<<#
  }
  if(model.getDistributeTechnology().equals("WS"))
  {
#>>
@WebService(endpointInterface = "<<#append(realSb,defaultNamespace);#>>IUmpleRuntime")
<<#
  }
  #>>
public class UmpleRuntime implements IUmpleRuntime
{
  static int thisNodeId=-1;
  private int numberOfNodes=0;
  private static String fileAddress="";
  static List<UmpleNode> nodes=new ArrayList<UmpleNode>();;
  static HashMap <String, UmpleComponent> components= new HashMap<String, UmpleComponent>();
  public static void setFileAddress(String address)
  {
    fileAddress=address;
  }
  public static int getThisNodeId()
  {
    return thisNodeId;
  }
    private static void setThisNodeId(int id)
  {
    thisNodeId=id;
  }  


  private static void readConfigFile()
  {
      String location="ComponentsConfig.xml";
      Properties prop = new Properties();
      InputStream input = null;

    try {

      input = new FileInputStream("config.properties");
      prop.load(input);
      setThisNodeId(Integer.parseInt(prop.getProperty("component")));
      location=prop.getProperty("location");
      setFileAddress(location);
    } catch (IOException e)
    {
      e.printStackTrace();
      setThisNodeId(0);    
    } 
    finally {
      if (input != null) {
        try {
          input.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  public static UmpleComponent getComponent(String RuntimeComponentName)
  { 
    getInstance();
    UmpleComponent aComponent=components.get(RuntimeComponentName);
    if (aComponent!=null)
      return aComponent;
    else
      return components.get("main");  
  }
// ******************************** Factory
    public static UmpleRuntime theInstance = null;
    List<IUmpleRuntime> remoteFactories;
    

    <<@ UmpleToJava.objectFactory_listOfObjects_All >>
    
    

    public static UmpleRuntime getInstance()
    {
      if(theInstance==null){
        theInstance = new UmpleRuntime();
        }
      return theInstance;
    }
   
    private UmpleRuntime()
    { 
      <<@ UmpleToJava.objectFactory_listOfObjects_instantiation_All >>
      remoteFactories= new ArrayList<IUmpleRuntime>();
      initialize();
    }
    public int getNodeId(int umpleNodeId)
    {
      int nodeId=umpleNodeId;
      if(nodeId>=numberOfNodes)
        nodeId=numberOfNodes-1;
      return nodeId;
    }
    public int getNodeId(UmpleComponent umpleComponent)
    {
      return umpleComponent.getNode().getId();
    }

    private void readComponentsFile()
    {
     UmpleNode an1= new UmpleNode(0);
     an1.setPort(2024);
     UmpleComponent c=new UmpleComponent("main",an1);
     nodes.add(an1);
     components.put("main",c);
     
     UmpleNode an2= new UmpleNode(1);
     an2.setPort(2028);
     UmpleComponent c1=new UmpleComponent("1",an2);
     nodes.add(an2);
    components.put("1",c1);
    }
    <<#
    if(model.getDistributeTechnology().equals("RMI"))
    {
    #>>
    Registry rmiRegistry;
    public void initialize()
    {    

      if(getThisNodeId()<0)
        readConfigFile();
      readComponentsFile();
      int numberOfNodes= nodes.size();
      System.out.println(getThisNodeId());
      startRMI();
      for(int node=0;node<numberOfNodes;node=node+1)
      {
        if(node==getThisNodeId())
        {
          remoteFactories.add(this);
        }
        else
        {System.out.println(node);
          while(true)
          {
            try 
            {
              Registry registry = LocateRegistry.getRegistry(nodes.get(node).getIp(),nodes.get(node).getPort());
              IUmpleRuntime stub = (IUmpleRuntime) registry.lookup("UmpleRuntime"+String.valueOf(node));
              remoteFactories.add(stub);
              break;
            } 
            catch (Exception e) 
            {
              System.err.println("Client exception: " + e.toString());
              e.printStackTrace();
            }
          } 
        } 
      }
    }
    public void startRMI() 
    {
      IUmpleRuntime stub;
      while(true){
        try
        {  
          // Bind the remote object's stub in the registry
          rmiRegistry= LocateRegistry.createRegistry(nodes.get(getThisNodeId()).getPort());
          stub = (IUmpleRuntime) UnicastRemoteObject.exportObject(this, 0);
          rmiRegistry.rebind("UmpleRuntime"+String.valueOf(getThisNodeId()), stub);
          System.err.println("Server ready");
          break;
        } 
        catch (Exception e)
        {
          System.err.println("binding exception: " + e.toString());
        }
      }
    }
    public void stopRMI() throws Exception 
    {
      rmiRegistry.unbind("UmpleRuntime");
      //unexportObject(this, true);
      //unexportObject(rmiRegistry, true);
      System.out.println("Component stopped");
    }
    <<#}
    if(model.getDistributeTechnology().equals("WS"))
    {
    #>>
    public void initialize()
    {    
      if(getThisNodeId()<0)
        readConfigFile();
      readComponentsFile();
      int numberOfNodes= nodes.size();
      System.out.println(getThisNodeId());
      Endpoint.publish(nodes.get(getThisNodeId()).getUrl()+":"+String.valueOf(nodes.get(getThisNodeId()).getPort())+"/hw",this);

      for(int node=0;node<numberOfNodes;node=node+1)
      {
        if(node==getThisNodeId())
        {
          remoteFactories.add(this);
        }
        else
        {System.out.println(node);
          while(true)
          {
            try 
            {
              URL url = new URL(nodes.get(node).getUrl()+String.valueOf(nodes.get(node).getPort())+"/hw?wsdl");
             
              QName qname = new QName("<<#append(realSb,qname);#>>",
                  "UmpleRuntimeService");
              Service service = Service.create(url, qname);
              IUmpleRuntime proxy = service.getPort(IUmpleRuntime.class);
              remoteFactories.add(proxy);
              break;
            } 
            catch (Exception e) 
            {
              System.err.println("Client exception: " + e.toString());
              e.printStackTrace();
            }
          } 
        } 
      }
    }

    <<#
    }
    #>>
    <<@ UmpleToJava.objectFactory_add_Declare_All >>
  public static void main (String [] args)
  {
    if (args.length>1){
      setThisNodeId(Integer.parseInt(args[0]));
      UmpleRuntime.getInstance().setFileAddress(args[1]);
    }
    else
      UmpleRuntime.getInstance();
  }
    public class UmpleNode
    {
      //------------------------
      // MEMBER VARIABLES
      //------------------------
      private int id;
      private String ip="localhost";
      private String url="http://127.0.0.1";
      private int port=1098;
      //------------------------
      // CONSTRUCTOR
      //------------------------

      public UmpleNode(int aId)
      {
        id= aId;
      }

      //------------------------
      // INTERFACE
      //------------------------
      public boolean setId(int aId)
      {
        boolean wasSet = false;
        id = aId;
        wasSet = true;
        return wasSet;
      }

      public boolean setIp(String aIp)
      {
        boolean wasSet = false;
        ip = aIp;
        wasSet = true;
        return wasSet;
      }

      public boolean setUrl(String aUrl)
      {
        boolean wasSet = false;
        url = aUrl;
        wasSet = true;
        return wasSet;
      }

      public boolean setPort(int aPort)
      {
        boolean wasSet = false;
        port = aPort;
        wasSet = true;
        return wasSet;
      }
      public int getId()
      {
        return id;
      }
      public String getIp()
      {
        return ip;
      }

      public String getUrl()
      {
        return url;
      }

      public int getPort()
      {
        return port;
      }
      public String toString()
      {
        return super.toString() + "["+"id" + ":" + getId()+ "]";
      }
    }

    public class UmpleComponent
    {

      //------------------------
      // MEMBER VARIABLES
      //------------------------

      //UmpleComponent Attributes
      private int number=0;
      private String name;
      private UmpleNode node;
      //------------------------
      // CONSTRUCTOR
      //------------------------

      public UmpleComponent(String aName,UmpleNode aNode)
      {
        name=aName;
        node=aNode;
      }

      //------------------------
      // INTERFACE
      //------------------------

      public boolean setNumber(int aNumber)
      {
        boolean wasSet = false;
        number = aNumber;
        wasSet = true;
        return wasSet;
      }

      public boolean setName(String aName)
      {
        boolean wasSet = false;
        name = aName;
        wasSet = true;
        return wasSet;
      }
      public boolean setNode(UmpleNode aNode)
      {
        boolean wasSet = false;
        node = aNode;
        wasSet = true;
        return wasSet;
      }
      public UmpleNode getNode()
      {
        return node;
      }

      public int getNumber()
      {
        return number;
      }

      public String getName()
      {
        return name;
      }
      public boolean equals(Object object) {
          if(object instanceof UmpleComponent && ((UmpleComponent)object).getName() == this.name) {
              return true;
          } else {
              return false;
          }
      }      
    }  
}
 !>>
}
